# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import e6data_python_connector.cluster_server.cluster_pb2 as cluster__pb2


class ClusterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.resume = channel.unary_unary(
                '/ClusterService/resume',
                request_serializer=cluster__pb2.ResumeRequest.SerializeToString,
                response_deserializer=cluster__pb2.ResumeResponse.FromString,
                )
        self.suspend = channel.unary_unary(
                '/ClusterService/suspend',
                request_serializer=cluster__pb2.SuspendRequest.SerializeToString,
                response_deserializer=cluster__pb2.SuspendResponse.FromString,
                )
        self.status = channel.unary_unary(
                '/ClusterService/status',
                request_serializer=cluster__pb2.ClusterStatusRequest.SerializeToString,
                response_deserializer=cluster__pb2.ClusterStatusResponse.FromString,
                )


class ClusterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def resume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def suspend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'resume': grpc.unary_unary_rpc_method_handler(
                    servicer.resume,
                    request_deserializer=cluster__pb2.ResumeRequest.FromString,
                    response_serializer=cluster__pb2.ResumeResponse.SerializeToString,
            ),
            'suspend': grpc.unary_unary_rpc_method_handler(
                    servicer.suspend,
                    request_deserializer=cluster__pb2.SuspendRequest.FromString,
                    response_serializer=cluster__pb2.SuspendResponse.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=cluster__pb2.ClusterStatusRequest.FromString,
                    response_serializer=cluster__pb2.ClusterStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClusterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def resume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterService/resume',
            cluster__pb2.ResumeRequest.SerializeToString,
            cluster__pb2.ResumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def suspend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterService/suspend',
            cluster__pb2.SuspendRequest.SerializeToString,
            cluster__pb2.SuspendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ClusterService/status',
            cluster__pb2.ClusterStatusRequest.SerializeToString,
            cluster__pb2.ClusterStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
