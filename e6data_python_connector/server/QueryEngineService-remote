#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from e6data_python_connector.server import QueryEngineService
from e6data_python_connector.server.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void clear(string sessionId, string queryId)')
    print('  void cancelQuery(string sessionId, string queryId)')
    print('  string explain(string sessionId, string queryId)')
    print('  string dryRun(string sessionId, string sSchema, string sQueryString)')
    print('  string dryRunV2(string sessionId, string catalogName, string sSchema, string sQueryString)')
    print('  string explainAnalyze(string sessionId, string queryId)')
    print('  string prepareStatement(string sessionId, string sSchemaName, string query)')
    print('  string prepareStatementV2(string sessionId, string catalogName, string sSchemaName, string query)')
    print('  void executeStatement(string sessionId, string queryId)')
    print('  string getNextResultBatch(string sessionId, string queryId)')
    print('  string getResultMetadata(string sessionId, string queryId)')
    print('  string authenticate(string user, string password)')
    print('   getTables(string sessionId, string schema)')
    print('   getTablesV2(string sessionId, string catalogName, string schema)')
    print('   getSchemaNames(string sessionId)')
    print('   getSchemaNamesV2(string sessionId, string catalogName)')
    print('   getColumns(string sessionId, string schema, string table)')
    print('   getColumnsV2(string sessionId, string catalogName, string schema, string table)')
    print('  void updateUsers(string userInfo)')
    print('  void setProps(string sessionId, string propMap)')
    print('  Status status(string sessionId, string queryId)')
    print('  void addCatalogs(string sessionId, string jsonString)')
    print('  AddCatalogsResponse getAddCatalogsResponse(string sessionId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = QueryEngineService.Client(protocol)
transport.open()

if cmd == 'clear':
    if len(args) != 2:
        print('clear requires 2 args')
        sys.exit(1)
    pp.pprint(client.clear(args[0], args[1],))

elif cmd == 'cancelQuery':
    if len(args) != 2:
        print('cancelQuery requires 2 args')
        sys.exit(1)
    pp.pprint(client.cancelQuery(args[0], args[1],))

elif cmd == 'explain':
    if len(args) != 2:
        print('explain requires 2 args')
        sys.exit(1)
    pp.pprint(client.explain(args[0], args[1],))

elif cmd == 'dryRun':
    if len(args) != 3:
        print('dryRun requires 3 args')
        sys.exit(1)
    pp.pprint(client.dryRun(args[0], args[1], args[2],))

elif cmd == 'dryRunV2':
    if len(args) != 4:
        print('dryRunV2 requires 4 args')
        sys.exit(1)
    pp.pprint(client.dryRunV2(args[0], args[1], args[2], args[3],))

elif cmd == 'explainAnalyze':
    if len(args) != 2:
        print('explainAnalyze requires 2 args')
        sys.exit(1)
    pp.pprint(client.explainAnalyze(args[0], args[1],))

elif cmd == 'prepareStatement':
    if len(args) != 3:
        print('prepareStatement requires 3 args')
        sys.exit(1)
    pp.pprint(client.prepareStatement(args[0], args[1], args[2],))

elif cmd == 'prepareStatementV2':
    if len(args) != 4:
        print('prepareStatementV2 requires 4 args')
        sys.exit(1)
    pp.pprint(client.prepareStatementV2(args[0], args[1], args[2], args[3],))

elif cmd == 'executeStatement':
    if len(args) != 2:
        print('executeStatement requires 2 args')
        sys.exit(1)
    pp.pprint(client.executeStatement(args[0], args[1],))

elif cmd == 'getNextResultBatch':
    if len(args) != 2:
        print('getNextResultBatch requires 2 args')
        sys.exit(1)
    pp.pprint(client.getNextResultBatch(args[0], args[1],))

elif cmd == 'getResultMetadata':
    if len(args) != 2:
        print('getResultMetadata requires 2 args')
        sys.exit(1)
    pp.pprint(client.getResultMetadata(args[0], args[1],))

elif cmd == 'authenticate':
    if len(args) != 2:
        print('authenticate requires 2 args')
        sys.exit(1)
    pp.pprint(client.authenticate(args[0], args[1],))

elif cmd == 'getTables':
    if len(args) != 2:
        print('getTables requires 2 args')
        sys.exit(1)
    pp.pprint(client.getTables(args[0], args[1],))

elif cmd == 'getTablesV2':
    if len(args) != 3:
        print('getTablesV2 requires 3 args')
        sys.exit(1)
    pp.pprint(client.getTablesV2(args[0], args[1], args[2],))

elif cmd == 'getSchemaNames':
    if len(args) != 1:
        print('getSchemaNames requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSchemaNames(args[0],))

elif cmd == 'getSchemaNamesV2':
    if len(args) != 2:
        print('getSchemaNamesV2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.getSchemaNamesV2(args[0], args[1],))

elif cmd == 'getColumns':
    if len(args) != 3:
        print('getColumns requires 3 args')
        sys.exit(1)
    pp.pprint(client.getColumns(args[0], args[1], args[2],))

elif cmd == 'getColumnsV2':
    if len(args) != 4:
        print('getColumnsV2 requires 4 args')
        sys.exit(1)
    pp.pprint(client.getColumnsV2(args[0], args[1], args[2], args[3],))

elif cmd == 'updateUsers':
    if len(args) != 1:
        print('updateUsers requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateUsers(args[0],))

elif cmd == 'setProps':
    if len(args) != 2:
        print('setProps requires 2 args')
        sys.exit(1)
    pp.pprint(client.setProps(args[0], args[1],))

elif cmd == 'status':
    if len(args) != 2:
        print('status requires 2 args')
        sys.exit(1)
    pp.pprint(client.status(args[0], args[1],))

elif cmd == 'addCatalogs':
    if len(args) != 2:
        print('addCatalogs requires 2 args')
        sys.exit(1)
    pp.pprint(client.addCatalogs(args[0], args[1],))

elif cmd == 'getAddCatalogsResponse':
    if len(args) != 1:
        print('getAddCatalogsResponse requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAddCatalogsResponse(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
