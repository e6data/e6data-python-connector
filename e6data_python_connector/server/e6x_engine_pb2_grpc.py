# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import e6data_python_connector.server.e6x_engine_pb2 as e6x__engine__pb2


class QueryEngineServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.clear = channel.unary_unary(
                '/QueryEngineService/clear',
                request_serializer=e6x__engine__pb2.ClearRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.ClearResponse.FromString,
                )
        self.cancelQuery = channel.unary_unary(
                '/QueryEngineService/cancelQuery',
                request_serializer=e6x__engine__pb2.CancelQueryRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.CancelQueryResponse.FromString,
                )
        self.clearOrCancelQuery = channel.unary_unary(
                '/QueryEngineService/clearOrCancelQuery',
                request_serializer=e6x__engine__pb2.ClearOrCancelQueryRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.ClearOrCancelQueryResponse.FromString,
                )
        self.explain = channel.unary_unary(
                '/QueryEngineService/explain',
                request_serializer=e6x__engine__pb2.ExplainRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.ExplainResponse.FromString,
                )
        self.dryRun = channel.unary_unary(
                '/QueryEngineService/dryRun',
                request_serializer=e6x__engine__pb2.DryRunRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.DryRunResponse.FromString,
                )
        self.dryRunV2 = channel.unary_unary(
                '/QueryEngineService/dryRunV2',
                request_serializer=e6x__engine__pb2.DryRunRequestV2.SerializeToString,
                response_deserializer=e6x__engine__pb2.DryRunResponse.FromString,
                )
        self.explainAnalyze = channel.unary_unary(
                '/QueryEngineService/explainAnalyze',
                request_serializer=e6x__engine__pb2.ExplainAnalyzeRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.ExplainAnalyzeResponse.FromString,
                )
        self.prepareStatement = channel.unary_unary(
                '/QueryEngineService/prepareStatement',
                request_serializer=e6x__engine__pb2.PrepareStatementRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.PrepareStatementResponse.FromString,
                )
        self.prepareStatementV2 = channel.unary_unary(
                '/QueryEngineService/prepareStatementV2',
                request_serializer=e6x__engine__pb2.PrepareStatementV2Request.SerializeToString,
                response_deserializer=e6x__engine__pb2.PrepareStatementResponse.FromString,
                )
        self.executeStatement = channel.unary_unary(
                '/QueryEngineService/executeStatement',
                request_serializer=e6x__engine__pb2.ExecuteStatementRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.ExecuteStatementResponse.FromString,
                )
        self.executeStatementV2 = channel.unary_unary(
                '/QueryEngineService/executeStatementV2',
                request_serializer=e6x__engine__pb2.ExecuteStatementV2Request.SerializeToString,
                response_deserializer=e6x__engine__pb2.ExecuteStatementResponse.FromString,
                )
        self.getNextResultRow = channel.unary_unary(
                '/QueryEngineService/getNextResultRow',
                request_serializer=e6x__engine__pb2.GetNextResultRowRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetNextResultRowResponse.FromString,
                )
        self.getNextResultBatch = channel.unary_unary(
                '/QueryEngineService/getNextResultBatch',
                request_serializer=e6x__engine__pb2.GetNextResultBatchRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetNextResultBatchResponse.FromString,
                )
        self.getResultMetadata = channel.unary_unary(
                '/QueryEngineService/getResultMetadata',
                request_serializer=e6x__engine__pb2.GetResultMetadataRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetResultMetadataResponse.FromString,
                )
        self.authenticate = channel.unary_unary(
                '/QueryEngineService/authenticate',
                request_serializer=e6x__engine__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.AuthenticateResponse.FromString,
                )
        self.getTables = channel.unary_unary(
                '/QueryEngineService/getTables',
                request_serializer=e6x__engine__pb2.GetTablesRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetTablesResponse.FromString,
                )
        self.getTablesV2 = channel.unary_unary(
                '/QueryEngineService/getTablesV2',
                request_serializer=e6x__engine__pb2.GetTablesV2Request.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetTablesResponse.FromString,
                )
        self.getSchemaNames = channel.unary_unary(
                '/QueryEngineService/getSchemaNames',
                request_serializer=e6x__engine__pb2.GetSchemaNamesRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetSchemaNamesResponse.FromString,
                )
        self.getSchemaNamesV2 = channel.unary_unary(
                '/QueryEngineService/getSchemaNamesV2',
                request_serializer=e6x__engine__pb2.GetSchemaNamesV2Request.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetSchemaNamesResponse.FromString,
                )
        self.getColumns = channel.unary_unary(
                '/QueryEngineService/getColumns',
                request_serializer=e6x__engine__pb2.GetColumnsRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetColumnsResponse.FromString,
                )
        self.getColumnsV2 = channel.unary_unary(
                '/QueryEngineService/getColumnsV2',
                request_serializer=e6x__engine__pb2.GetColumnsV2Request.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetColumnsResponse.FromString,
                )
        self.updateUsers = channel.unary_unary(
                '/QueryEngineService/updateUsers',
                request_serializer=e6x__engine__pb2.UpdateUsersRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.UpdateUsersResponse.FromString,
                )
        self.setProps = channel.unary_unary(
                '/QueryEngineService/setProps',
                request_serializer=e6x__engine__pb2.SetPropsRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.SetPropsResponse.FromString,
                )
        self.status = channel.unary_unary(
                '/QueryEngineService/status',
                request_serializer=e6x__engine__pb2.StatusRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.StatusResponse.FromString,
                )
        self.addCatalogs = channel.unary_unary(
                '/QueryEngineService/addCatalogs',
                request_serializer=e6x__engine__pb2.AddCatalogsRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.AddCatalogsResponse.FromString,
                )
        self.getAddCatalogsResponse = channel.unary_unary(
                '/QueryEngineService/getAddCatalogsResponse',
                request_serializer=e6x__engine__pb2.GetAddCatalogsRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetAddCatalogsResponse.FromString,
                )
        self.getCataloges = channel.unary_unary(
                '/QueryEngineService/getCataloges',
                request_serializer=e6x__engine__pb2.GetCatalogesRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.GetCatalogesResponse.FromString,
                )
        self.getNextRemoteCachedChunk = channel.unary_unary(
                '/QueryEngineService/getNextRemoteCachedChunk',
                request_serializer=e6x__engine__pb2.RemoteChunkRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.RemoteChunkResponse.FromString,
                )
        self.refreshCatalogs = channel.unary_unary(
                '/QueryEngineService/refreshCatalogs',
                request_serializer=e6x__engine__pb2.RefreshCatalogsRequest.SerializeToString,
                response_deserializer=e6x__engine__pb2.RefreshCatalogsResponse.FromString,
                )


class QueryEngineServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def clear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancelQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clearOrCancelQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def explain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dryRun(self, request, context):
        """Executor, Engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dryRunV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def explainAnalyze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prepareStatement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prepareStatementV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def executeStatement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def executeStatementV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNextResultRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNextResultBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getResultMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTablesV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSchemaNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSchemaNamesV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getColumns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getColumnsV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setProps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addCatalogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAddCatalogsResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCataloges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNextRemoteCachedChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def refreshCatalogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryEngineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=e6x__engine__pb2.ClearRequest.FromString,
                    response_serializer=e6x__engine__pb2.ClearResponse.SerializeToString,
            ),
            'cancelQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.cancelQuery,
                    request_deserializer=e6x__engine__pb2.CancelQueryRequest.FromString,
                    response_serializer=e6x__engine__pb2.CancelQueryResponse.SerializeToString,
            ),
            'clearOrCancelQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.clearOrCancelQuery,
                    request_deserializer=e6x__engine__pb2.ClearOrCancelQueryRequest.FromString,
                    response_serializer=e6x__engine__pb2.ClearOrCancelQueryResponse.SerializeToString,
            ),
            'explain': grpc.unary_unary_rpc_method_handler(
                    servicer.explain,
                    request_deserializer=e6x__engine__pb2.ExplainRequest.FromString,
                    response_serializer=e6x__engine__pb2.ExplainResponse.SerializeToString,
            ),
            'dryRun': grpc.unary_unary_rpc_method_handler(
                    servicer.dryRun,
                    request_deserializer=e6x__engine__pb2.DryRunRequest.FromString,
                    response_serializer=e6x__engine__pb2.DryRunResponse.SerializeToString,
            ),
            'dryRunV2': grpc.unary_unary_rpc_method_handler(
                    servicer.dryRunV2,
                    request_deserializer=e6x__engine__pb2.DryRunRequestV2.FromString,
                    response_serializer=e6x__engine__pb2.DryRunResponse.SerializeToString,
            ),
            'explainAnalyze': grpc.unary_unary_rpc_method_handler(
                    servicer.explainAnalyze,
                    request_deserializer=e6x__engine__pb2.ExplainAnalyzeRequest.FromString,
                    response_serializer=e6x__engine__pb2.ExplainAnalyzeResponse.SerializeToString,
            ),
            'prepareStatement': grpc.unary_unary_rpc_method_handler(
                    servicer.prepareStatement,
                    request_deserializer=e6x__engine__pb2.PrepareStatementRequest.FromString,
                    response_serializer=e6x__engine__pb2.PrepareStatementResponse.SerializeToString,
            ),
            'prepareStatementV2': grpc.unary_unary_rpc_method_handler(
                    servicer.prepareStatementV2,
                    request_deserializer=e6x__engine__pb2.PrepareStatementV2Request.FromString,
                    response_serializer=e6x__engine__pb2.PrepareStatementResponse.SerializeToString,
            ),
            'executeStatement': grpc.unary_unary_rpc_method_handler(
                    servicer.executeStatement,
                    request_deserializer=e6x__engine__pb2.ExecuteStatementRequest.FromString,
                    response_serializer=e6x__engine__pb2.ExecuteStatementResponse.SerializeToString,
            ),
            'executeStatementV2': grpc.unary_unary_rpc_method_handler(
                    servicer.executeStatementV2,
                    request_deserializer=e6x__engine__pb2.ExecuteStatementV2Request.FromString,
                    response_serializer=e6x__engine__pb2.ExecuteStatementResponse.SerializeToString,
            ),
            'getNextResultRow': grpc.unary_unary_rpc_method_handler(
                    servicer.getNextResultRow,
                    request_deserializer=e6x__engine__pb2.GetNextResultRowRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetNextResultRowResponse.SerializeToString,
            ),
            'getNextResultBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.getNextResultBatch,
                    request_deserializer=e6x__engine__pb2.GetNextResultBatchRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetNextResultBatchResponse.SerializeToString,
            ),
            'getResultMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.getResultMetadata,
                    request_deserializer=e6x__engine__pb2.GetResultMetadataRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetResultMetadataResponse.SerializeToString,
            ),
            'authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.authenticate,
                    request_deserializer=e6x__engine__pb2.AuthenticateRequest.FromString,
                    response_serializer=e6x__engine__pb2.AuthenticateResponse.SerializeToString,
            ),
            'getTables': grpc.unary_unary_rpc_method_handler(
                    servicer.getTables,
                    request_deserializer=e6x__engine__pb2.GetTablesRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetTablesResponse.SerializeToString,
            ),
            'getTablesV2': grpc.unary_unary_rpc_method_handler(
                    servicer.getTablesV2,
                    request_deserializer=e6x__engine__pb2.GetTablesV2Request.FromString,
                    response_serializer=e6x__engine__pb2.GetTablesResponse.SerializeToString,
            ),
            'getSchemaNames': grpc.unary_unary_rpc_method_handler(
                    servicer.getSchemaNames,
                    request_deserializer=e6x__engine__pb2.GetSchemaNamesRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetSchemaNamesResponse.SerializeToString,
            ),
            'getSchemaNamesV2': grpc.unary_unary_rpc_method_handler(
                    servicer.getSchemaNamesV2,
                    request_deserializer=e6x__engine__pb2.GetSchemaNamesV2Request.FromString,
                    response_serializer=e6x__engine__pb2.GetSchemaNamesResponse.SerializeToString,
            ),
            'getColumns': grpc.unary_unary_rpc_method_handler(
                    servicer.getColumns,
                    request_deserializer=e6x__engine__pb2.GetColumnsRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetColumnsResponse.SerializeToString,
            ),
            'getColumnsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.getColumnsV2,
                    request_deserializer=e6x__engine__pb2.GetColumnsV2Request.FromString,
                    response_serializer=e6x__engine__pb2.GetColumnsResponse.SerializeToString,
            ),
            'updateUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.updateUsers,
                    request_deserializer=e6x__engine__pb2.UpdateUsersRequest.FromString,
                    response_serializer=e6x__engine__pb2.UpdateUsersResponse.SerializeToString,
            ),
            'setProps': grpc.unary_unary_rpc_method_handler(
                    servicer.setProps,
                    request_deserializer=e6x__engine__pb2.SetPropsRequest.FromString,
                    response_serializer=e6x__engine__pb2.SetPropsResponse.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=e6x__engine__pb2.StatusRequest.FromString,
                    response_serializer=e6x__engine__pb2.StatusResponse.SerializeToString,
            ),
            'addCatalogs': grpc.unary_unary_rpc_method_handler(
                    servicer.addCatalogs,
                    request_deserializer=e6x__engine__pb2.AddCatalogsRequest.FromString,
                    response_serializer=e6x__engine__pb2.AddCatalogsResponse.SerializeToString,
            ),
            'getAddCatalogsResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.getAddCatalogsResponse,
                    request_deserializer=e6x__engine__pb2.GetAddCatalogsRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetAddCatalogsResponse.SerializeToString,
            ),
            'getCataloges': grpc.unary_unary_rpc_method_handler(
                    servicer.getCataloges,
                    request_deserializer=e6x__engine__pb2.GetCatalogesRequest.FromString,
                    response_serializer=e6x__engine__pb2.GetCatalogesResponse.SerializeToString,
            ),
            'getNextRemoteCachedChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.getNextRemoteCachedChunk,
                    request_deserializer=e6x__engine__pb2.RemoteChunkRequest.FromString,
                    response_serializer=e6x__engine__pb2.RemoteChunkResponse.SerializeToString,
            ),
            'refreshCatalogs': grpc.unary_unary_rpc_method_handler(
                    servicer.refreshCatalogs,
                    request_deserializer=e6x__engine__pb2.RefreshCatalogsRequest.FromString,
                    response_serializer=e6x__engine__pb2.RefreshCatalogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QueryEngineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryEngineService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/clear',
            e6x__engine__pb2.ClearRequest.SerializeToString,
            e6x__engine__pb2.ClearResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancelQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/cancelQuery',
            e6x__engine__pb2.CancelQueryRequest.SerializeToString,
            e6x__engine__pb2.CancelQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clearOrCancelQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/clearOrCancelQuery',
            e6x__engine__pb2.ClearOrCancelQueryRequest.SerializeToString,
            e6x__engine__pb2.ClearOrCancelQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def explain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/explain',
            e6x__engine__pb2.ExplainRequest.SerializeToString,
            e6x__engine__pb2.ExplainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dryRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/dryRun',
            e6x__engine__pb2.DryRunRequest.SerializeToString,
            e6x__engine__pb2.DryRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dryRunV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/dryRunV2',
            e6x__engine__pb2.DryRunRequestV2.SerializeToString,
            e6x__engine__pb2.DryRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def explainAnalyze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/explainAnalyze',
            e6x__engine__pb2.ExplainAnalyzeRequest.SerializeToString,
            e6x__engine__pb2.ExplainAnalyzeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def prepareStatement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/prepareStatement',
            e6x__engine__pb2.PrepareStatementRequest.SerializeToString,
            e6x__engine__pb2.PrepareStatementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def prepareStatementV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/prepareStatementV2',
            e6x__engine__pb2.PrepareStatementV2Request.SerializeToString,
            e6x__engine__pb2.PrepareStatementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def executeStatement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/executeStatement',
            e6x__engine__pb2.ExecuteStatementRequest.SerializeToString,
            e6x__engine__pb2.ExecuteStatementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def executeStatementV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/executeStatementV2',
            e6x__engine__pb2.ExecuteStatementV2Request.SerializeToString,
            e6x__engine__pb2.ExecuteStatementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNextResultRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getNextResultRow',
            e6x__engine__pb2.GetNextResultRowRequest.SerializeToString,
            e6x__engine__pb2.GetNextResultRowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNextResultBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getNextResultBatch',
            e6x__engine__pb2.GetNextResultBatchRequest.SerializeToString,
            e6x__engine__pb2.GetNextResultBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getResultMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getResultMetadata',
            e6x__engine__pb2.GetResultMetadataRequest.SerializeToString,
            e6x__engine__pb2.GetResultMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/authenticate',
            e6x__engine__pb2.AuthenticateRequest.SerializeToString,
            e6x__engine__pb2.AuthenticateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getTables',
            e6x__engine__pb2.GetTablesRequest.SerializeToString,
            e6x__engine__pb2.GetTablesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTablesV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getTablesV2',
            e6x__engine__pb2.GetTablesV2Request.SerializeToString,
            e6x__engine__pb2.GetTablesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSchemaNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getSchemaNames',
            e6x__engine__pb2.GetSchemaNamesRequest.SerializeToString,
            e6x__engine__pb2.GetSchemaNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSchemaNamesV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getSchemaNamesV2',
            e6x__engine__pb2.GetSchemaNamesV2Request.SerializeToString,
            e6x__engine__pb2.GetSchemaNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getColumns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getColumns',
            e6x__engine__pb2.GetColumnsRequest.SerializeToString,
            e6x__engine__pb2.GetColumnsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getColumnsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getColumnsV2',
            e6x__engine__pb2.GetColumnsV2Request.SerializeToString,
            e6x__engine__pb2.GetColumnsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/updateUsers',
            e6x__engine__pb2.UpdateUsersRequest.SerializeToString,
            e6x__engine__pb2.UpdateUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setProps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/setProps',
            e6x__engine__pb2.SetPropsRequest.SerializeToString,
            e6x__engine__pb2.SetPropsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/status',
            e6x__engine__pb2.StatusRequest.SerializeToString,
            e6x__engine__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addCatalogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/addCatalogs',
            e6x__engine__pb2.AddCatalogsRequest.SerializeToString,
            e6x__engine__pb2.AddCatalogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAddCatalogsResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getAddCatalogsResponse',
            e6x__engine__pb2.GetAddCatalogsRequest.SerializeToString,
            e6x__engine__pb2.GetAddCatalogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCataloges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getCataloges',
            e6x__engine__pb2.GetCatalogesRequest.SerializeToString,
            e6x__engine__pb2.GetCatalogesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNextRemoteCachedChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/getNextRemoteCachedChunk',
            e6x__engine__pb2.RemoteChunkRequest.SerializeToString,
            e6x__engine__pb2.RemoteChunkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def refreshCatalogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryEngineService/refreshCatalogs',
            e6x__engine__pb2.RefreshCatalogsRequest.SerializeToString,
            e6x__engine__pb2.RefreshCatalogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
